<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap-theme.css">
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.js"></script>
    <script src="/js/dependencies/bootstrap.js"></script>
    <script src="/js/dependencies/underscore.js"></script>
    <script src="/js/customValidate.js"></script>
    <script src="/js/jquery.validate.min.js"></script>
    <!--SCRIPTS END-->    

    <!-- ensure that _csrf variable is available on every page -->
    <script>
      window.inventool = {
        csrf: "<%= _csrf %>",
        isMobile: isMobile()
      };

      $(document).ready(function() {
        bindProductScanButton();
      });

      function bindProductScanButton() {
        if (window.inventool.isMobile) {
          var scanURL = encodeURIComponent('https://inventool.herokuapp.com/sale/productScan?code={CODE}&roomName=newSale');
          $('#productScanAnchor').attr('href', 'http://zxing.appspot.com/scan?ret=' + scanURL + '&SCAN_FORMATS=UPC_A,EAN_13');
        } else {
          $('#productScanAnchor').css('display', 'none');          
        }
      }

      function isMobile() {
        try{ document.createEvent("TouchEvent"); return true; }
        catch(e){ return false; }
      }       

    </script>
    <!-- -->    

    <!-- sounds for flash messages -->
    <audio id="flashAudio">
      <source src="/sounds/notify.mp3" type="audio/mpeg">
    </audio>
  </head>

  <body>

  <div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">      
      <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>      
        <a class="navbar-brand" href="/">Inventool</a>
      </div>
      

      <div class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
          <% if (session.authenticated ) { %>
            <li class="active"><a href="/user/show/<%= session.user.id %>"><%= session.user.firstName + ' ' + session.user.lastName %></a></li>
            <li><a href="/company/dashboard/<%= session.user.company %>">Dashboard</a></li>
            <li><a href="/product/index/">Products</a></li>            
            <li><a href="/customer/index/">Customers</a></li>
            <li><a href="" id="productScanAnchor">Scan Product</a>
          <% } %>
          <% if (session.authenticated && session.user.admin) { %>
            <li><a href="/user">Administration</a></li>        
          <% } %>          
        </ul>

        <div class="navbar-right">
          <% if(session.authenticated) { %>
            <a href="/session/destroy" class="btn btn-default navbar-btn navbar-right">Sign Out</a>
          <% } %>          
        </div>
        <% if (!session.authenticated) { %>
          <form class="navbar-form navbar-right" action="/session/create">
            <div class="form-group">
              <input type="text" name="email" placeholder="email" class="form-control">
            </div>
            <div class="form-group">
              <input type="password" name="password" placeholder="password" class="form-control">
            </div>
            <input type="submit" class="btn btn-default" value="log in">     
            <input type="hidden" name="_csrf" value="<%= _csrf %>">       
          </form>
        <% } %>
      </div>
    </div>
  </div>

    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
  </body>
</html>
