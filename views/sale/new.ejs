<script type="text/javascript">
	// BEGIN SUBSCRIBE FUNCTIONALITY
	io.socket.get('/sale/subscribe', {roomName: 'newSale'}, function(resData, jwres) {
		console.log(resData);		
	});

	io.socket.on('message', function(data) {
		if (data.message == 'newSubscriber') {
			console.log('newSubscriber!');
			console.log(data);
		}

		if (data.message == 'saleUpdate') {
			console.log('saleUpdate!');
			console.log(data);

			// only add the line item if the update is from a mobile device
			if (data.isFromMobile == true && window.inventool.isMobile == false) {
				addItemFromUpdate(data.lineItem);	
			}			
		}

		if (data.message == 'mobileScan') {
			console.log('mobile scan!');
			console.log(data);

			addItemFromMobileScan(data.product);
		}
	});

	function addItemFromUpdate(lineItem) {
		// count rows, excluding the header row and the last 'totals' row
		var lineItemCount = $('#productTable tr').not('#salesTotals, thead tr').length;

		// create new sales line item object
		var newItem = new SaleLineItem(lineItemCount);
		newItem.product = lineItem.product;
		newItem.quantity = lineItem.quantity;
		saleLineItems.push(newItem);

		// add row to product table
		$('#productTable tr:last').before(
			JST['assets/templates/saleLineItem.ejs']({dataId: lineItemCount})
		);			

		// calculate info for line item
		newItem.setProductInfo();

		// calculate sale total
		calculateSaleTotal();		
	}

	function addItemFromMobileScan(product) {
		// count rows, excluding the header row and the last 'totals' row
		var lineItemCount = $('#productTable tr').not('#salesTotals, thead tr').length;		

		// create new sales line item object
		var newItem = new SaleLineItem(lineItemCount);
		newItem.product = product;	
		newItem.quantity = 1;
		saleLineItems.push(newItem);		

		// add row to product table
		$('#productTable tr:last').before(
			JST['assets/templates/saleLineItem.ejs']({dataId: lineItemCount})
		);			

		// calculate info for line item
		newItem.setProductInfo();

		// calculate sale total
		calculateSaleTotal();		
	}


	// BEGIN SALE FUNCTIONALITY
	$(document).ready(function() {
		bindAddBtn();
		bindProductSearch();
		bindProductSelect();
		bindQuantityChange();
		bindFormSubmit();
	});

	var saleLineItems = [];

	function getSaleLineItems() {		
		var data = {
			lineItems: JSON.stringify(saleLineItems), 
			_csrf: window.inventool.csrf || ''
		}				
		return data;
	}

	function bindAddBtn() {
		$('.addButton').on('click', function(e) {
			e.preventDefault();

			// count rows, excluding the header row and the last 'totals' row
			var lineItemCount = $('#productTable tr').not('#salesTotals, thead tr').length;

			// create new sales line item object
			var newItem = new SaleLineItem(lineItemCount);
			saleLineItems.push(newItem);

			// add row to product table
			$('#productTable tr:last').before(
				JST['assets/templates/saleLineItem.ejs']({dataId: lineItemCount})
			);			
		});
	}

	function bindProductSearch() {
		// method clears and populates the product dropdown for each line item when the user
		// types a search term into the input
		$('body').on('keyup', 'td[attr=lineItemName] input', function(event) {
			var input = $(this);
			var dropdown = input.parent().find('.dropdown-menu');

			// clear existing values from dropdown
			dropdown.empty();

			// retrieve the products based on search term and add them to dropdown list
			io.socket.get('/sale/productSearch', {productSearch: input.val()}, function(resData, jwres) {
				$.each(resData.products, function(index, product) {
					dropdown.append('<a class="dropdown-item" href="#"">' + product.name + '</a>');
				});
			});
		});
	}

	function bindProductSelect() {
		// method updates line item info when a product is selected
		$('body').on('click', 'td[attr=lineItemName] .dropdown-item', function(event) {
			// button that triggered event
			var button = $(this);			

			// rowId that the button is within
			var dataId = button.parents('tr').attr('data-id');

			// get line item from list using dataId from element
			var saleLineItem = saleLineItems[dataId];

			// set the product attribute on the line item object
			saleLineItem.setProduct(button.text(), function() {

				// update all info for the line item
				saleLineItem.setProductInfo();

				// broadcast update
				saleLineItem.broadcastUpdate();

				// calculate sales total
				calculateSaleTotal();
			});
		});
	}

	function bindQuantityChange() {
		// function updates sales total when quantity on a line item changes
		$('body').on('change', 'td[attr=lineItemQuantity] input', function(event) {			

			// rowId that the button is within
			var dataId = $(this).parents('tr').attr('data-id');

			// get line item from dataId
			var saleLineItem = saleLineItems[dataId];

			// update all info for row
			saleLineItem.setProductInfo();

			// broadcast update
			saleLineItem.broadcastUpdate();			

			// calculate sale total
			calculateSaleTotal();
		});
	}

	function calculateSaleTotal() {
		// function calculates the totals for the sale when updates are made
		var saleTotalEl = $('td[attr=saleTotalPrice]');
		var saleTotal = 0;

		$.each($('td[attr=lineItemTotalPrice]'), function(index, lineItemPrice) {
			saleTotal += getIntFromCurrency($(lineItemPrice).text());
		});

		saleTotalEl.empty().append('<b>$' + Number(saleTotal).toLocaleString('en') + '</b>');
	}	

	function getIntFromCurrency(currencyVal) {
		return Number(currencyVal.replace(/[^0-9\.]+/g,""));
	}

	// Sale Line Item object
	function SaleLineItem(rowId) {
		var self = this;

		this.rowId = rowId;
		this.product = null;
		this.quantity = null;
		this.totalPrice = null;

		// retrieve the product based on the selection from the dropdown in this row		
		this.setProduct = function(productName, callback) {
			io.socket.get('/sale/productInfo', {product: productName}, function(resData, jwres) {
				// set product attribute of object
				self.product = resData.product;

				// run callback passed in
				callback();
			});		
		}

		this.setProductInfo = function() {
			// function calculates all the data for line item
			var lineItemRow = self.getRow();

			// get all relevant elements
			var nameEl = lineItemRow.find('td[attr=lineItemName] input');
			var unitPriceEl = lineItemRow.find('td[attr=lineItemUnitPrice]');
			var totalPriceEl = lineItemRow.find('td[attr=lineItemTotalPrice]');
			var quantity = lineItemRow.find('td[attr=lineItemQuantity] input').val();

			// set attributes on record
			self.quantity = quantity;
			self.totalPrice = self.product.unitPrice * quantity;

			// update elements
			nameEl.val(self.product.name);
			unitPriceEl.text('$' + Number(self.product.unitPrice).toLocaleString('en'));
			totalPriceEl.text('$' + Number(self.product.unitPrice * quantity).toLocaleString('en'));		
		}

		this.broadcastUpdate = function() {
			// setup data to send to server to be broadcast to other screens
			var broadcastData = {
				lineItem: JSON.stringify(saleLineItems[this.rowId]), 
				_csrf: window.inventool.csrf || '',
				roomName: 'newSale',
				isMobile: window.inventool.isMobile
			}

			// broadcast sales data to other screens
			io.socket.post('/sale/broadcastSaleUpdate', broadcastData, function(resData, jwres) {
				console.log(resData);
				console.log(jwres);
			});			
		}
	}

	SaleLineItem.prototype.getRow = function() {
		return $('#productTable tr[data-id="' + this.rowId + '"]');
	}
	// END SALE LINE ITEM OBJECT

	// form submission logic
	function bindFormSubmit() {
		$('#saleForm input[type=submit]').on('click', function(e) {
			e.preventDefault();

			console.log(JSON.stringify(saleLineItems));

			io.socket.post('/sale/create', 
				{
					lineItems: JSON.stringify(saleLineItems),
					_csrf: window.inventool.csrf || ''
				}, 
				function(resData, jwres) {

			});
		});
	}
</script>
<div class="container">
	<h1 class="pageHeader">New Sale</h2>

	<a href="/user/new?source=userIndex" class="addButton btn-index-new">
		<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
	</a>

	<form action="/sale/create" method="POST" id="saleForm">
		<table id="productTable" class="table table-striped table-hover">
			<thead>
				<tr>
					<th>Product</th>
					<th>Unit Price</th>
					<th>Quantity</th>
					<th>Total Price</th>
				</tr>
			</thead>
			<tbody>
				<tr id="salesTotals" class="success">
					<td><b>Sale Total: </b></td>
					<td></td>
					<td></td>
					<td attr="saleTotalPrice"><b>$0.00</b></td>
				</tr>
			</tbody>

		</table>

		<input type="hidden" name="_csrf" value="<%= _csrf %>">

		<input type="submit" value="Confirm" class="btn btn-lg btn-primary btn-block">
	</form>
</div>