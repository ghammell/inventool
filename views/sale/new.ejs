<script type="text/javascript">
	$(document).ready(function() {
		bindAddBtn();
		bindProductSearch();
		bindProductSelect();
		bindQuantityChange();
	});

	var saleLineItems = [];

	function bindAddBtn() {
		$('.addButton').on('click', function(e) {
			e.preventDefault();

			// count rows, excluding the header row and the last 'totals' row
			var lineItemCount = $('#productTable tr').not('#salesTotals, thead tr').length;

			// create new sales line item object
			var newItem = new SaleLineItem(lineItemCount);
			saleLineItems.push(newItem);
			console.log(saleLineItems);

			// add row to product table
			$('#productTable tr:last').before(
				JST['assets/templates/saleLineItem.ejs']({dataId: lineItemCount})
			);			
		});
	}

	function bindProductSearch() {
		// method clears and populates the product dropdown for each line item when the user
		// types a search term into the input
		$('body').on('keyup', 'td[attr=lineItemName] input', function(event) {
			var input = $(this);
			var dropdown = input.parent().find('.dropdown-menu');

			dropdown.empty();

			// retrieve the products based on search term and add them to dropdown list
			io.socket.get('/sale/productSearch', {productSearch: input.val()}, function(resData, jwres) {
				console.log(resData);
				$.each(resData.products, function(index, product) {
					input.parent().find('.dropdown-menu').append('<a class="dropdown-item" href="#"">' + product.name + '</a>');
				});
			});
		});
	}

	function bindProductSelect() {
		// method updates line item info when a product is selected
		$('body').on('click', 'td[attr=lineItemName] .dropdown-item', function(event) {

			// button that triggered event
			var button = $(this);

			// rowId that the button is within
			var dataId = button.parents('tr').attr('data-id');

			var saleLineItem = saleLineItems[dataId];
			saleLineItem.setProduct(button.text());
			console.log(saleLineItem);
			saleLineItem.setProductInfo();
		});
	}

	function bindQuantityChange() {
		// function updates sales total when quantity on a line item changes
		$('body').on('change', 'td[attr=lineItemQuantity] input', function(event) {			
			// calc line item total
			calculateProductInfo($(this), null);

			// calc total sale
			calculateSaleTotal();
		});
	}

	function calculateProductInfo(triggerEl, product) {
		// function calculates all the data for a specific line item when updates are made
		var unitPriceEl = $(triggerEl).parents('tr').find('td[attr=lineItemUnitPrice]');
		var totalPriceEl = $(triggerEl).parents('tr').find('td[attr=lineItemTotalPrice]');
		var quantity = $(triggerEl).parents('tr').find('td[attr=lineItemQuantity] input').val();

		// if a product was not passed in, then a different attribute being changed is the trigger
		// so the unit price should already be filled in
		var unitPrice = product == null ? getIntFromCurrency(unitPriceEl.text()) : product.unitPrice;
		unitPriceEl.text('$' + Number(unitPrice).toLocaleString('en'));
		totalPriceEl.text('$' + Number(unitPrice * quantity).toLocaleString('en'));		

		// calc total sale
		calculateSaleTotal();	
	}

	function calculateSaleTotal() {
		// function calculates the totals for the sale when updates are made
		var saleTotalEl = $('td[attr=saleTotalPrice]');
		var saleTotal = 0;

		$.each($('td[attr=lineItemTotalPrice]'), function(index, lineItemPrice) {
			saleTotal += getIntFromCurrency($(lineItemPrice).text());
		});

		saleTotalEl.empty().append('<b>$' + Number(saleTotal).toLocaleString('en') + '</b>');
	}

	function getIntFromCurrency(currencyVal) {
		return Number(currencyVal.replace(/[^0-9\.]+/g,""));
	}

	// Sale Line Item object
	function SaleLineItem(rowId) {
		var self = this;

		this.rowId = rowId;
		this.product = null;

		// retrieve the product based on the selection from the dropdown in this row		
		this.setProduct = function(productName) {
			io.socket.get('/sale/productInfo', {product: productName}, function(resData, jwres) {
				self.product = resData.product;
				console.log(self);
			});		
		}

		this.setProductInfo = function() {
			// function calculates all the data for line item
			var lineItemRow = self.getRow();
			console.log(lineItemRow);

			// get all relevant elements
			var nameEl = lineItemRow.find('td[attr=lineItemName] input');
			var unitPriceEl = lineItemRow.find('td[attr=lineItemUnitPrice]');
			var totalPriceEl = lineItemRow.find('td[attr=lineItemTotalPrice]');
			var quantity = lineItemRow.find('td[attr=lineItemQuantity] input').val();

			nameEl.val(self.product.name);
			unitPriceEl.text('$' + Number(self.product.unitPrice).toLocaleString('en'));
			totalPriceEl.text('$' + Number(self.product.unitPrice * quantity).toLocaleString('en'));				
		}
	}

	SaleLineItem.prototype.getRow = function() {
		return $('#productTable tr[data-id="' + this.rowId + '"]');
	}

	// END SALE LINE ITEM OBJECT
</script>
<div class="container">
	<h1 class="pageHeader">New Sale</h2>

	<a href="/user/new?source=userIndex" class="addButton btn-index-new">
		<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
	</a>	

	<form action="/sale/create" method="POST">
		<table id="productTable" class="table table-striped table-hover">
			<thead>
				<tr>
					<th>Product</th>
					<th>Unit Price</th>
					<th>Quantity</th>
					<th>Total Price</th>
				</tr>
			</thead>
			<tbody>
				<tr id="salesTotals" class="success">
					<td><b>Sale Total: </b></td>
					<td></td>
					<td></td>
					<td attr="saleTotalPrice"><b>$0.00</b></td>
				</tr>
			</tbody>

		</table>

		<input type="hidden" name="_csrf" value="<%= _csrf %>">
	</form>
</div>